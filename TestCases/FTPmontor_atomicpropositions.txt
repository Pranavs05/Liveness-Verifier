Allows traffic on data port only if it received a signal on the control port

 dstport=portcontrol,srcIP=A,dstIP=B;send().  P

r0.active=TRUE&TRUE&TRUE|!(r0.active=TRUE&TRUE)&TRUE



srcport=portdata,srcIP=B,dstIP=A;send().    Q
r1.active=TRUE&TRUE&FALSE|!(r1.active=TRUE&TRUE)&TRUE




(P|-Q) & (P->G(Q))


((r0.active=TRUE&TRUE&TRUE|!(r0.active=TRUE&TRUE)&TRUE)|!(r1.active=TRUE&TRUE&FALSE|!(r1.active=TRUE&TRUE)&TRUE))&((r0.active=TRUE&TRUE&TRUE|!(r0.active=TRUE&TRUE)&TRUE)-> G(r1.active=TRUE&TRUE&FALSE|!(r1.active=TRUE&TRUE)&TRUE))



Output :


check_ltlspec -p "((r0.active=TRUE&TRUE&TRUE|!(r0.active=TRUE&TRUE)&TRUE)|!(r1.active=TRUE&TRUE&FALSE|!(r1.active=TRUE&TRUE)&TRUE))&((r0.active=TRUE&TRUE&TRUE|!(r0.active=TRUE&TRUE)&TRUE)-> G(r1.active=TRUE&TRUE&FALSE|!(r1.active=TRUE&TRUE)&TRUE))"
-- specification (((((r0.active = TRUE & TRUE) & TRUE) | (!(r0.active = TRUE & TRUE) & TRUE)) | !(((r1.active = TRUE & TRUE) & FALSE) | (!(r1.active = TRUE & TRUE) & TRUE))) & ((((r0.active = TRUE & TRUE) & TRUE) | (!(r0.active = TRUE & TRUE) & TRUE)) ->  G (((r1.active = TRUE & TRUE) & FALSE) | (!(r1.active = TRUE & TRUE) & TRUE))))  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample 
Trace Type: Counterexample 
  -> State: 2.1 <-
    r0.active = TRUE
    r1.active = FALSE
  -> Input: 2.2 <-
    _process_selector_ = r0
    running = FALSE
    r1.running = FALSE
    r0.running = TRUE
  -- Loop starts here
  -> State: 2.2 <-
    r0.active = FALSE
    r1.active = TRUE
  -> Input: 2.3 <-
    _process_selector_ = main
    running = TRUE
    r0.running = FALSE
  -- Loop starts here
  -> State: 2.3 <-
  -> Input: 2.4 <-
  -> State: 2.4 <-